'use strict';

exports.__esModule = true;
exports.default = servePreact;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _runSeries = require('run-series');

var _runSeries2 = _interopRequireDefault(_runSeries);

var _errors = require('../errors');

var _webpackServer = require('../webpackServer');

var _webpackServer2 = _interopRequireDefault(_webpackServer);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Using a config function as we may need to resolve the path to Preact, which
// we may also have to install first.
function buildConfig(args) {
  var entry = args._[1];
  var mountId = args['mount-id'] || 'app';

  var config = {
    babel: {
      presets: ['preact'],
      stage: 0
    },
    output: {
      filename: 'app.js',
      path: process.cwd(),
      publicPath: '/'
    },
    plugins: {
      html: {
        mountId,
        title: args.title || 'Preact App'
      }
    },
    resolve: {
      alias: {
        'react': 'preact-compat/dist/preact-compat',
        'react-dom': 'preact-compat/dist/preact-compat'
      }
    }
  };

  if (args.force === true) {
    config.entry = [_path2.default.resolve(entry)];
  } else {
    // Use a render shim module which supports quick prototyping
    config.entry = [require.resolve('../preactRunEntry')];
    config.plugins.define = { NWB_PREACT_RUN_MOUNT_ID: JSON.stringify(mountId) };
    // Allow the render shim module to import the provided entry module
    config.resolve.alias['nwb-preact-run-entry'] = _path2.default.resolve(entry);
    // Allow the render shim module to resolve Preact from the cwd
    config.resolve.alias['preact'] = _path2.default.dirname(_resolve2.default.sync('preact/package.json', { basedir: process.cwd() }));
  }

  if (args.polyfill === false || args.polyfills === false) {
    config.polyfill = false;
  }

  return config;
}

/**
 * Build a standalone Preact entry module, component or element.
 */
function servePreact(args, cb) {
  if (args._.length === 1) {
    return cb(new _errors.UserError('An entry module must be specified.'));
  }

  (0, _runSeries2.default)([function (cb) {
    return (0, _utils.install)(['preact', 'preact-compat'], { args, check: true }, cb);
  }, function (cb) {
    return (0, _webpackServer2.default)(args, buildConfig, cb);
  }], cb);
}
module.exports = exports['default'];