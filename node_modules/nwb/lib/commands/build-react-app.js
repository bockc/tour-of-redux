'use strict';

exports.__esModule = true;
exports.default = buildReactApp;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _runSeries = require('run-series');

var _runSeries2 = _interopRequireDefault(_runSeries);

var _appConfig = require('../appConfig');

var _utils = require('../utils');

var _webpackBuild = require('../webpackBuild');

var _webpackBuild2 = _interopRequireDefault(_webpackBuild);

var _cleanApp = require('./clean-app');

var _cleanApp2 = _interopRequireDefault(_cleanApp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Using a config function as webpackBuild() sets NODE_ENV to production if it
// hasn't been set by the user and we don't want production optimisations in
// development builds.
function buildConfig(args) {
  var entry = _path2.default.resolve(args._[1] || 'src/index.js');
  var dist = _path2.default.resolve(args._[2] || 'dist');

  var production = process.env.NODE_ENV === 'production';
  var filenamePattern = production ? '[name].[chunkhash:8].js' : '[name].js';

  var config = {
    babel: {
      presets: ['react']
    },
    devtool: 'source-map',
    entry: {
      app: [entry]
    },
    output: {
      filename: filenamePattern,
      chunkFilename: filenamePattern,
      path: dist,
      publicPath: '/'
    },
    plugins: {
      html: (0, _appConfig.getDefaultHTMLConfig)(),
      vendor: args.vendor !== false
    }
  };

  if (_glob2.default.sync('public/').length !== 0) {
    config.plugins.copy = [{ from: _path2.default.resolve('public'), to: dist, ignore: '.gitkeep' }];
  }

  if (args.inferno) {
    config.resolve = {
      alias: {
        'react': 'inferno-compat',
        'react-dom': 'inferno-compat'
      }
    };
  } else if (args.preact) {
    config.resolve = {
      alias: {
        'react': 'preact-compat/dist/preact-compat',
        'react-dom': 'preact-compat/dist/preact-compat'
      }
    };
  }

  if (production) {
    config.babel.presets.push('react-prod');
  }

  return config;
}

/**
 * Build a React app.
 */
function buildReactApp(args, cb) {
  var dist = args._[2] || 'dist';

  var library = 'React';
  var packages = [];
  if (args.inferno) {
    library = 'Inferno (React compat)';
    packages = ['inferno', 'inferno-compat'];
  } else if (args.preact) {
    library = 'Preact (React compat)';
    packages = ['preact', 'preact-compat'];
  }

  (0, _runSeries2.default)([function (cb) {
    return (0, _utils.install)(packages, { check: true }, cb);
  }, function (cb) {
    return (0, _cleanApp2.default)({ _: ['clean-app', dist] }, cb);
  }, function (cb) {
    return (0, _webpackBuild2.default)(`${library} app`, args, buildConfig, cb);
  }], cb);
}
module.exports = exports['default'];