'use strict';

exports.__esModule = true;
exports.default = buildInferno;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _runSeries = require('run-series');

var _runSeries2 = _interopRequireDefault(_runSeries);

var _errors = require('../errors');

var _webpackBuild = require('../webpackBuild');

var _webpackBuild2 = _interopRequireDefault(_webpackBuild);

var _utils = require('../utils');

var _cleanApp = require('./clean-app');

var _cleanApp2 = _interopRequireDefault(_cleanApp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Using a config function as webpackBuild() sets NODE_ENV to production if it
// hasn't been set by the user and we don't want production optimisations in
// development builds.
function buildConfig(args) {
  var entry = args._[1];
  var dist = args._[2] || 'dist';
  var mountId = args['mount-id'] || 'app';

  var production = process.env.NODE_ENV === 'production';
  var filenamePattern = production ? '[name].[chunkhash:8].js' : '[name].js';

  var config = {
    babel: {
      presets: ['inferno'],
      stage: 0
    },
    devtool: 'source-map',
    output: {
      chunkFilename: filenamePattern,
      filename: filenamePattern,
      path: _path2.default.resolve(dist),
      publicPath: '/'
    },
    plugins: {
      html: {
        mountId,
        title: args.title || 'Inferno App'
      },
      // A vendor bundle must be explicitly enabled with a --vendor flag
      vendor: args.vendor
    },
    resolve: {
      alias: {
        'react': 'inferno-compat',
        'react-dom': 'inferno-compat'
      }
    }
  };

  if (args.force === true) {
    config.entry = { app: [_path2.default.resolve(entry)] };
  } else {
    // Use a render shim module which supports quick prototyping
    config.entry = { app: [require.resolve('../infernoRunEntry')] };
    config.plugins.define = { NWB_INFERNO_RUN_MOUNT_ID: JSON.stringify(mountId) };
    // Allow the render shim module to resolve Inferno from the cwd
    config.resolve.alias['inferno'] = _path2.default.dirname(_resolve2.default.sync('inferno/package.json', { basedir: process.cwd() }));
    // Allow the render shim module to import the provided entry module
    config.resolve.alias['nwb-inferno-run-entry'] = _path2.default.resolve(entry);
  }

  if (args.polyfill === false || args.polyfills === false) {
    config.polyfill = false;
  }

  return config;
}

/**
 * Build a standalone Inferno entry module, component or VNode.
 */
function buildInferno(args, cb) {
  if (args._.length === 1) {
    return cb(new _errors.UserError('An entry module must be specified.'));
  }

  var dist = args._[2] || 'dist';

  (0, _runSeries2.default)([function (cb) {
    return (0, _utils.install)(['inferno', 'inferno-component', 'inferno-compat'], { args, check: true }, cb);
  }, function (cb) {
    return (0, _cleanApp2.default)({ _: ['clean-app', dist] }, cb);
  }, function (cb) {
    return (0, _webpackBuild2.default)(`Inferno app`, args, buildConfig, cb);
  }], cb);
}
module.exports = exports['default'];