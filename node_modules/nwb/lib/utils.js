'use strict';

exports.__esModule = true;
exports.clean = clean;
exports.clearConsole = clearConsole;
exports.deepToString = deepToString;
exports.getArgsPlugins = getArgsPlugins;
exports.install = install;
exports.joinAnd = joinAnd;
exports.toSource = toSource;
exports.typeOf = typeOf;
exports.unique = unique;

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _crossSpawn = require('cross-spawn');

var _crossSpawn2 = _interopRequireDefault(_crossSpawn);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _runSeries = require('run-series');

var _runSeries2 = _interopRequireDefault(_runSeries);

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Check if any of the given directories exist and delete them while displaying
 * a spinner if so.
 * @param {string} desc a description of what's being cleaned, e.g. 'app'
 * @param {Array<string>} dirs paths to delete.
 * @param {function(?Error=)} cb
 */
function clean(desc, dirs, cb) {
  (0, _glob2.default)(`+(${dirs.join('|')})/`, function (err, dirs) {
    if (err) return cb(err);
    if (dirs.length === 0) return cb();
    var spinner = (0, _ora2.default)(`Cleaning ${desc}`).start();
    (0, _runSeries2.default)(dirs.map(function (dir) {
      return function (cb) {
        return (0, _rimraf2.default)(dir, cb);
      };
    }), function (err) {
      if (err) {
        spinner.fail();
        return cb(err);
      }
      spinner.succeed();
      cb();
    });
  });
}

/**
 * Clear console scrollback.
 */
function clearConsole() {
  // XXX Hack for testing
  // TODO Give users a way to disable console clearing
  if (process.env.NWB_TEST) return;
  // This will completely wipe scrollback in cmd.exe on Windows - use cmd.exe's
  // `start` command to launch nwb's dev server in a new prompt if you don't
  // want to lose it.
  process.stdout.write(process.platform === 'win32' ? '\x1Bc' : '\x1B[2J\x1B[3J\x1B[H');
}

/**
 * Log objects in their entirety so we can see everything in debug output.
 */
function deepToString(object) {
  return _util2.default.inspect(object, { colors: true, depth: null });
}

/**
 * Get a list of nwb plugin names passed as arguments.
 * @param {Object} args parsed arguments.
 * @param {string=} args.plugins comma-separated list of nwb plugin names.
 * @param {string=} args.plugin typo'd comma-separated list of nwb plugin names.
 * @return {Array<string>}
 */
function getArgsPlugins(args) {
  var plugins = args.plugins || args.plugin;
  if (!plugins) return [];
  return plugins.split(',').map(function (name) {
    return name.replace(/^(nwb-)?/, 'nwb-');
  });
}

/**
 * Install packages from npm.
 * @param {Array<string>} packages npm package names, which may be in
 *   package@version format.
 * @param {Object=} options
   @param {Object=} options.args parsed arguments.
 * @param {boolean=} options.check check if packages are resolvable from
 *   the cwd and skip installation if already installed.
 * @param {string=} options.cwd working directory to install in.
 * @param {boolean=} options.dev save dependencies to devDependencies.
 * @param {boolean=} options.save save dependencies to package.json.
 * @param {function(?Error)} cb completion callback.
 */
function install(packages, options, cb) {
  if (typeOf(options) === 'function') {
    cb = options;
    options = {};
  }
  var _options = options,
      _options$args = _options.args,
      args = _options$args === undefined ? null : _options$args,
      _options$check = _options.check,
      check = _options$check === undefined ? false : _options$check,
      _options$cwd = _options.cwd,
      cwd = _options$cwd === undefined ? process.cwd() : _options$cwd,
      _options$dev = _options.dev,
      dev = _options$dev === undefined ? false : _options$dev,
      _options$save = _options.save,
      save = _options$save === undefined ? false : _options$save;

  // If the command being run allows users to specify an nwb plugins option by
  // providing the args object here, make sure they're installed.

  if (args) {
    packages = packages.concat(getArgsPlugins(args));
  }

  if (check) {
    packages = packages.filter(function (pkg) {
      // Assumption: we're not dealing with scoped packages, which start with @
      var name = pkg.split('@')[0];
      try {
        _resolve2.default.sync(name, { basedir: cwd });
        return false;
      } catch (e) {
        return true;
      }
    });
  }

  if (packages.length === 0) {
    return process.nextTick(cb);
  }

  var npmArgs = ['install', '--silent', '--no-progress'];

  if (save) {
    npmArgs.push(`--save${dev ? '-dev' : ''}`);
  }

  npmArgs = npmArgs.concat(packages);

  (0, _debug2.default)(`${cwd} $ npm ${npmArgs.join(' ')}`);
  var spinner = (0, _ora2.default)(`Installing ${joinAnd(packages)}`).start();
  var npm = (0, _crossSpawn2.default)('npm', npmArgs, { cwd, stdio: ['ignore', 'pipe', 'inherit'] });
  npm.on('close', function (code) {
    if (code !== 0) {
      spinner.fail();
      return cb(new Error('npm install failed'));
    }
    spinner.succeed();
    cb();
  });
}

/**
 * Join multiple items with a penultimate "and".
 * @param {Array<*>} arr
 */
function joinAnd(array) {
  if (array.length === 0) return '';
  if (array.length === 1) return String(array[0]);
  return `${array.slice(0, -1).join(', ')} and ${array[array.length - 1]}`;
}

/**
 * Hack to generate simple config file contents by stringifying to JSON, but
 * without JSON formatting.
 */
function toSource(obj) {
  return JSON.stringify(obj, null, 2).replace(/"([^"]+)":/g, '$1:').replace(/"/g, "'");
}

/**
 * Better typeof.
 */
function typeOf(o) {
  if (Number.isNaN(o)) return 'nan';
  return Object.prototype.toString.call(o).slice(8, -1).toLowerCase();
}

/**
 * @param {Array<string>} strings
 */
function unique(strings) {
  // eslint-disable-next-line
  return Object.keys(strings.reduce(function (o, s) {
    return o[s] = true, o;
  }, {}));
}