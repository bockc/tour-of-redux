'use strict';

exports.__esModule = true;
exports.default = nwbMiddleware;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _constants = require('./constants');

var _createServerWebpackConfig = require('./createServerWebpackConfig');

var _createServerWebpackConfig2 = _interopRequireDefault(_createServerWebpackConfig);

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

var _getUserConfig = require('./getUserConfig');

var _getUserConfig2 = _interopRequireDefault(_getUserConfig);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SERVE_APP_CONFIG = {
  [_constants.INFERNO_APP]: './createServeInfernoAppConfig',
  [_constants.PREACT_APP]: './createServePreactAppConfig',
  [_constants.REACT_APP]: './createServeReactAppConfig',
  [_constants.WEB_APP]: './createServeWebAppConfig'
};

/**
 * Express middleware for serving an app with hot reloading - equivalent to
 * having run `nwb serve`, but from your own server.
 */
function nwbMiddleware(express) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  (0, _assert2.default)(express && typeof express.Router === 'function', 'The express module must be passed as the first argument to nwb middleware');

  // We need to do an intial grab of the user config to determine the project
  // type.
  var userConfig = (0, _getUserConfig2.default)({ _: ['serve'], config: options.config }, { required: true });
  if (!SERVE_APP_CONFIG[userConfig.type]) {
    throw new Error(`nwb Express middleware is unable to serve anything for a ${userConfig.type} project.`);
  }

  var createServeAppConfig = require(SERVE_APP_CONFIG[userConfig.type]);

  // Use options to create an object equivalent to CLI args parsed by minimist
  var args = {
    _: [`serve-${userConfig.type}`, options.entry],
    config: options.config,
    install: !!options.install || !!options.autoInstall,
    reload: !!options.reload
  };

  var webpackConfig = (0, _createServerWebpackConfig2.default)(args, createServeAppConfig(args, {
    plugins: {
      status: {
        middleware: true
      }
    }
  }));

  (0, _debug2.default)('webpack config: %s', (0, _utils.deepToString)(webpackConfig));

  var compiler = (0, _webpack2.default)(webpackConfig);

  var router = express.Router();

  router.use(require('webpack-dev-middleware')(compiler, {
    noInfo: true,
    publicPath: webpackConfig.output.publicPath,
    quiet: true,
    watchOptions: {
      ignored: /node_modules/
    }
  }));

  router.use(require('webpack-hot-middleware')(compiler, {
    log: false
  }));

  return router;
}
module.exports = exports['default'];