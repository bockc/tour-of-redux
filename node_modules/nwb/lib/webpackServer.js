'use strict';

exports.__esModule = true;
exports.default = webpackServer;

var _chalk = require('chalk');

var _detectPort = require('detect-port');

var _detectPort2 = _interopRequireDefault(_detectPort);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _constants = require('./constants');

var _createServerWebpackConfig = require('./createServerWebpackConfig');

var _createServerWebpackConfig2 = _interopRequireDefault(_createServerWebpackConfig);

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

var _devServer = require('./devServer');

var _devServer2 = _interopRequireDefault(_devServer);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Get the host and port to run the server on, detecting if the intended port
 * is available first and prompting the user if not.
 */
function getServerOptions(args, cb) {
  // Fallback index serving is enabled by default and must be explicitly enabled
  var fallback = args.fallback !== false;
  // The dev server handles defaulting the host by not providing it at all
  var host = args.host;
  var intendedPort = args.port || _constants.DEFAULT_PORT;

  (0, _detectPort2.default)(intendedPort, function (err, suggestedPort) {
    if (err) return cb(err);
    if (suggestedPort === intendedPort) return cb(null, { fallback, host, port: intendedPort });
    if (args.force) return cb(null, { fallback, host, port: suggestedPort });

    (0, _utils.clearConsole)();
    console.log((0, _chalk.yellow)(`Something is already running on port ${intendedPort}.`));
    console.log();
    _inquirer2.default.prompt([{
      type: 'confirm',
      name: 'run',
      message: 'Would you like to run the app on another port instead?',
      default: true
    }]).then(function (_ref) {
      var run = _ref.run;
      return cb(null, run ? { fallback, host, port: suggestedPort } : null);
    }, function (err) {
      return cb(err);
    });
  });
}

/**
 * Start a development server with Webpack using a given build configuration.
 */
function webpackServer(args, buildConfig, cb) {
  // Default environment to development - we also run the dev server while
  // testing to check that HMR works.
  if (!process.env.NODE_ENV) {
    process.env.NODE_ENV = 'development';
  }

  if (typeof buildConfig == 'function') {
    buildConfig = buildConfig(args);
  }

  // Other config can be provided by the user via the CLI
  getServerOptions(args, function (err, options) {
    if (err) return cb(err);
    if (options === null) return cb();

    if (!('status' in buildConfig.plugins)) {
      buildConfig.plugins.status = {
        message: `The app is running at http://${options.host || 'localhost'}:${options.port}/`
      };
    }

    var webpackConfig = (0, _createServerWebpackConfig2.default)(args, buildConfig);

    (0, _debug2.default)('webpack config: %s', (0, _utils.deepToString)(webpackConfig));

    (0, _devServer2.default)(webpackConfig, options, cb);
  });
}
module.exports = exports['default'];