'use strict';

exports.__esModule = true;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _utils = require('./utils');

var _webpackUtils = require('./webpackUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Display current build status for a Webpack watch build.
 * Based on create-react-app@0.2's start script.
 */
var StatusPlugin = function () {
  function StatusPlugin() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$message = _ref.message,
        message = _ref$message === undefined ? '' : _ref$message,
        _ref$middleware = _ref.middleware,
        middleware = _ref$middleware === undefined ? false : _ref$middleware,
        _ref$test = _ref.test,
        test = _ref$test === undefined ? false : _ref$test;

    _classCallCheck(this, StatusPlugin);

    // Provides details of the URL the dev server is available at
    this.message = message;
    // Flag: don't clear the console as we're in someone else's server
    this.middleware = middleware;
    // Flag: ONLY log errors and warnings
    this.test = test;

    // We only want to display the "Starting..." message once
    this.initial = true;

    this.watchRun = this.watchRun.bind(this);
    this.done = this.done.bind(this);
  }

  StatusPlugin.prototype.apply = function apply(compiler) {
    compiler.plugin('watch-run', this.watchRun);
    compiler.plugin('done', this.done);
  };

  StatusPlugin.prototype.clearConsole = function clearConsole() {
    if (!this.test) {
      (0, _utils.clearConsole)();
    }
  };

  StatusPlugin.prototype.log = function log(message) {
    if (!this.test) {
      console.log(message);
    }
  };

  StatusPlugin.prototype.watchRun = function watchRun(watching, cb) {
    if (!this.middleware) {
      this.clearConsole();
    }
    if (this.initial) {
      this.log(_chalk2.default.cyan('Starting Webpack compilation...'));
      this.initial = false;
    } else {
      this.log('Recompiling...');
    }
    cb();
  };

  StatusPlugin.prototype.done = function done(stats) {
    if (!this.middleware) {
      this.clearConsole();
    }

    var hasErrors = stats.hasErrors();
    var hasWarnings = stats.hasWarnings();

    if (!hasErrors && !hasWarnings) {
      var time = stats.endTime - stats.startTime;
      this.log(_chalk2.default.green(`Compiled successfully in ${time} ms.`));
    } else {
      (0, _webpackUtils.logErrorsAndWarnings)(stats);
      if (hasErrors) return;
    }

    if (!this.middleware) {
      this.log('');
      this.log(this.message);
    }
  };

  return StatusPlugin;
}();

exports.default = StatusPlugin;
module.exports = exports['default'];